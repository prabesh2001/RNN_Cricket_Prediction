{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1erIgkJy6Tus7kP8Jit0kWIn2k659BNRW","authorship_tag":"ABX9TyM5ZQqPdRP/s4QBZIQZ5QL4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n","from sklearn.metrics import classification_report, roc_auc_score, roc_curve, auc\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import SimpleRNN, Dense, Dropout"],"metadata":{"id":"F3VwFYESiQA_","executionInfo":{"status":"ok","timestamp":1732509097518,"user_tz":-345,"elapsed":399,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# Load dataset\n","file_path = '/content/drive/MyDrive/Neural Network /week-5/cricket_prediction using RNN/testSeries.csv'  # Update with your file path if different\n","data = pd.read_csv(file_path)"],"metadata":{"id":"EBDdMWUjiSgF","executionInfo":{"status":"ok","timestamp":1732509098553,"user_tz":-345,"elapsed":621,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Vmz0bvG5rL3v","executionInfo":{"status":"ok","timestamp":1732510549648,"user_tz":-345,"elapsed":433,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"9e96c35a-44e0-4205-a00e-9831d06469b6"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Team  Opponent        Date   Matches  Result  Won  Lost  Drawn\n","0     0         1  15/03/1877  0.166667       0  0.2   0.2    0.0\n","1     0         1  02/01/1879  0.000000       2  0.2   0.0    0.0\n","2     1         0  06/09/1880  0.000000       2  0.2   0.0    0.0\n","3     0         1  31/12/1881  0.500000       2  0.4   0.0    0.4\n","4     1         0  28/08/1882  0.000000       1  0.0   0.2    0.0"],"text/html":["\n","  <div id=\"df-af95c7db-3a70-4f56-a703-5cb0545db3d4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Team</th>\n","      <th>Opponent</th>\n","      <th>Date</th>\n","      <th>Matches</th>\n","      <th>Result</th>\n","      <th>Won</th>\n","      <th>Lost</th>\n","      <th>Drawn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>15/03/1877</td>\n","      <td>0.166667</td>\n","      <td>0</td>\n","      <td>0.2</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>02/01/1879</td>\n","      <td>0.000000</td>\n","      <td>2</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>06/09/1880</td>\n","      <td>0.000000</td>\n","      <td>2</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>31/12/1881</td>\n","      <td>0.500000</td>\n","      <td>2</td>\n","      <td>0.4</td>\n","      <td>0.0</td>\n","      <td>0.4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>28/08/1882</td>\n","      <td>0.000000</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af95c7db-3a70-4f56-a703-5cb0545db3d4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-af95c7db-3a70-4f56-a703-5cb0545db3d4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-af95c7db-3a70-4f56-a703-5cb0545db3d4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-576978d7-1b13-4b5f-973e-2bc3d5f2ff40\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-576978d7-1b13-4b5f-973e-2bc3d5f2ff40')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-576978d7-1b13-4b5f-973e-2bc3d5f2ff40 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 633,\n  \"fields\": [\n    {\n      \"column\": \"Team\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Opponent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 617,\n        \"samples\": [\n          \"11/1/1930\",\n          \"21/07/2016\",\n          \"24/12/1949\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Matches\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20886167266349254,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.16666666666666666,\n          0.0,\n          0.9999999999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Result\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Won\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23773785415826895,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.2,\n          0.4,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19928933671031862,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.2,\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Drawn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22921658833031328,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.0,\n          0.4,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["# Encode categorical variables (Team, Opponent, Result)\n","label_enc_team = LabelEncoder()\n","label_enc_opponent = LabelEncoder()\n","label_enc_result = LabelEncoder()\n","data['Team'] = label_enc_team.fit_transform(data['Team'])\n","data['Opponent'] = label_enc_opponent.fit_transform(data['Opponent'])\n","data['Result'] = label_enc_result.fit_transform(data['Result'])"],"metadata":{"id":"GIucTypMiVmg","executionInfo":{"status":"ok","timestamp":1732509098553,"user_tz":-345,"elapsed":6,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["\n","# Normalize numerical features (Matches, Won, Lost, Drawn)\n","scaler = MinMaxScaler()\n","numerical_features = ['Matches', 'Won', 'Lost', 'Drawn']\n","data[numerical_features] = scaler.fit_transform(data[numerical_features])"],"metadata":{"id":"QFUP6J9PifgS","executionInfo":{"status":"ok","timestamp":1732509098553,"user_tz":-345,"elapsed":6,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Prepare input (X) and output (y)\n","X = data[['Team', 'Opponent', 'Matches', 'Won', 'Lost', 'Drawn']].values\n","y = data['Result'].values\n"],"metadata":{"id":"4Aavu1c3ii2_","executionInfo":{"status":"ok","timestamp":1732509098553,"user_tz":-345,"elapsed":5,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Convert data into sequences\n","sequence_length = 5\n","X_sequences = []\n","y_sequences = []\n","\n","for i in range(len(X) - sequence_length):\n","    X_sequences.append(X[i:i + sequence_length])\n","    y_sequences.append(y[i + sequence_length])\n","\n","X_sequences = np.array(X_sequences)\n","y_sequences = np.array(y_sequences)"],"metadata":{"id":"nvlL6imLindY","executionInfo":{"status":"ok","timestamp":1732509098553,"user_tz":-345,"elapsed":5,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Split into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_sequences, y_sequences, test_size=0.2, random_state=42)"],"metadata":{"id":"ZR6NRvDTiogu","executionInfo":{"status":"ok","timestamp":1732509098553,"user_tz":-345,"elapsed":5,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Build the RNN model\n","model = Sequential([\n","    SimpleRNN(64, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2]), return_sequences=False),\n","    Dropout(0.2),\n","    Dense(32, activation='relu'),\n","    Dropout(0.2),\n","    Dense(len(np.unique(y_train)), activation='softmax')  # Output layer for classification\n","])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jPl_nnS3is4N","executionInfo":{"status":"ok","timestamp":1732509098554,"user_tz":-345,"elapsed":6,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"84ce5426-ba42-4f2d-8938-aeb892531ab9"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]}]},{"cell_type":"code","source":["# Compile the model\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"],"metadata":{"id":"OBfkWG1yiwEZ","executionInfo":{"status":"ok","timestamp":1732509098554,"user_tz":-345,"elapsed":5,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["# Train the model\n","history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=16, verbose=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hWvHAWG2iz3y","executionInfo":{"status":"ok","timestamp":1732509106875,"user_tz":-345,"elapsed":8326,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"4f72f3c0-5045-4ef4-fe00-6297d3906bd4"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 13ms/step - accuracy: 0.3954 - loss: 1.1930 - val_accuracy: 0.5317 - val_loss: 1.0479\n","Epoch 2/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.4923 - loss: 1.0589 - val_accuracy: 0.5238 - val_loss: 1.0426\n","Epoch 3/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.4928 - loss: 1.0398 - val_accuracy: 0.5317 - val_loss: 1.0398\n","Epoch 4/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.4995 - loss: 1.0264 - val_accuracy: 0.5159 - val_loss: 1.0457\n","Epoch 5/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.4932 - loss: 1.0148 - val_accuracy: 0.5238 - val_loss: 1.0459\n","Epoch 6/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.4907 - loss: 1.0537 - val_accuracy: 0.5317 - val_loss: 1.0410\n","Epoch 7/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.5016 - loss: 0.9837 - val_accuracy: 0.5317 - val_loss: 1.0364\n","Epoch 8/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.5097 - loss: 0.9962 - val_accuracy: 0.5238 - val_loss: 1.0316\n","Epoch 9/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.4743 - loss: 1.0169 - val_accuracy: 0.5238 - val_loss: 1.0282\n","Epoch 10/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - accuracy: 0.5272 - loss: 0.9826 - val_accuracy: 0.5238 - val_loss: 1.0393\n","Epoch 11/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.5397 - loss: 0.9663 - val_accuracy: 0.4921 - val_loss: 1.0480\n","Epoch 12/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.5403 - loss: 0.9245 - val_accuracy: 0.5079 - val_loss: 1.0612\n","Epoch 13/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.5735 - loss: 0.9248 - val_accuracy: 0.5000 - val_loss: 1.0590\n","Epoch 14/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.5519 - loss: 0.9066 - val_accuracy: 0.5079 - val_loss: 1.0561\n","Epoch 15/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.5528 - loss: 0.9667 - val_accuracy: 0.4921 - val_loss: 1.0671\n","Epoch 16/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.5605 - loss: 0.9420 - val_accuracy: 0.4841 - val_loss: 1.0688\n","Epoch 17/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.5436 - loss: 0.9408 - val_accuracy: 0.4921 - val_loss: 1.0724\n","Epoch 18/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.5897 - loss: 0.8690 - val_accuracy: 0.4921 - val_loss: 1.0971\n","Epoch 19/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.5768 - loss: 0.8946 - val_accuracy: 0.5000 - val_loss: 1.0661\n","Epoch 20/20\n","\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.5703 - loss: 0.8819 - val_accuracy: 0.4841 - val_loss: 1.0734\n"]}]},{"cell_type":"code","source":["# Evaluate the model\n","loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n","print(f\"Test Accuracy: {accuracy:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"thdZpSvyi24r","executionInfo":{"status":"ok","timestamp":1732509107577,"user_tz":-345,"elapsed":704,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"67eb38f3-1955-450e-9f85-21d17b2fec09"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Accuracy: 0.48\n"]}]},{"cell_type":"code","source":["# Predict on test data\n","y_pred_proba = model.predict(X_test)\n","y_pred = np.argmax(y_pred_proba, axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C2ujXd_si6PI","executionInfo":{"status":"ok","timestamp":1732509107577,"user_tz":-345,"elapsed":12,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"ba32566d-8a53-48b0-c5fd-c2c02b0b7764"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 60ms/step\n"]}]},{"cell_type":"code","source":["# Classification report\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred, target_names=label_enc_result.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uTv5CfpGi86M","executionInfo":{"status":"ok","timestamp":1732509107577,"user_tz":-345,"elapsed":10,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"e36a02e2-40ff-4e54-a534-dd5b82490028"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","       Drawn       0.50      0.07      0.13        27\n","        Lost       0.20      0.09      0.13        32\n","         Won       0.52      0.84      0.64        67\n","\n","    accuracy                           0.48       126\n","   macro avg       0.41      0.33      0.30       126\n","weighted avg       0.44      0.48      0.40       126\n","\n"]}]},{"cell_type":"code","source":["# Calculate AUC-ROC\n","if len(np.unique(y_train)) == 2:  # AUC-ROC is valid for binary classification\n","    auc_roc = roc_auc_score(y_test, y_pred_proba[:, 1])\n","    print(f\"AUC-ROC Score: {auc_roc:.2f}\")\n","else:\n","    auc_roc = \"N/A for multiclass\""],"metadata":{"id":"wBE5ri42jADD","executionInfo":{"status":"ok","timestamp":1732509107578,"user_tz":-345,"elapsed":9,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["# Plot ROC Curve (if binary classification)\n","if len(np.unique(y_train)) == 2:\n","    fpr, tpr, _ = roc_curve(y_test, y_pred_proba[:, 1])\n","    roc_auc = auc(fpr, tpr)\n","    plt.figure()\n","    plt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\n","    plt.plot([0, 1], [0, 1], color='gray', lw=1, linestyle='--')\n","    plt.xlabel('False Positive Rate')\n","    plt.ylabel('True Positive Rate')\n","    plt.title('Receiver Operating Characteristic')\n","    plt.legend(loc=\"lower right\")\n","    plt.show()"],"metadata":{"id":"LLvaqEdClfz5","executionInfo":{"status":"ok","timestamp":1732509107578,"user_tz":-345,"elapsed":9,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["# Save the model\n","model.save(\"rnn_series_prediction_model.h5\")\n","print(\"\\nModel saved as 'rnn_series_prediction_model.h5'.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t-asNeG0ljkH","executionInfo":{"status":"ok","timestamp":1732509107578,"user_tz":-345,"elapsed":8,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"86bac27a-e1a4-465f-cc0e-17891a1cd9ef"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\n","Model saved as 'rnn_series_prediction_model.h5'.\n"]}]},{"cell_type":"code","source":["# Example prediction\n","example_sequence = X_test[:1]  # Use the first test sequence as an example\n","predicted_result = model.predict(example_sequence)\n","predicted_class = np.argmax(predicted_result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WQcpusgUlm0B","executionInfo":{"status":"ok","timestamp":1732509108008,"user_tz":-345,"elapsed":436,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"1aaa98ce-64ef-4aa9-e96f-851c2a27fdb9"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n"]}]},{"cell_type":"code","source":["# Decode the predicted result back to the original label\n","decoded_result = label_enc_result.inverse_transform([predicted_class])\n","print(f\"Predicted Result for the first test sequence: {decoded_result[0]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u7_L7metlpxA","executionInfo":{"status":"ok","timestamp":1732509108008,"user_tz":-345,"elapsed":3,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"37ee862c-2b10-4e8f-c898-be5bd5d03347"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted Result for the first test sequence: Won\n"]}]},{"cell_type":"code","source":["# Encoding and Normalization\n","data['Team'] = label_enc_team.fit_transform(data['Team'])\n","data['Opponent'] = label_enc_opponent.fit_transform(data['Opponent'])\n","data['Result'] = label_enc_result.fit_transform(data['Result'])\n","\n","scaler = MinMaxScaler()\n","numerical_features = ['Matches', 'Won', 'Lost', 'Drawn']\n","data[numerical_features] = scaler.fit_transform(data[numerical_features])\n"],"metadata":{"id":"dUY0f5xvy-9k","executionInfo":{"status":"ok","timestamp":1732512580707,"user_tz":-345,"elapsed":381,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["model = Sequential([\n","    SimpleRNN(64, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2]), return_sequences=False),\n","    Dropout(0.2),\n","    Dense(32, activation='relu'),\n","    Dropout(0.2),\n","    Dense(len(np.unique(y_train)), activation='softmax')\n","])\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qCF_xn8uzBWQ","executionInfo":{"status":"ok","timestamp":1732512605575,"user_tz":-345,"elapsed":1731,"user":{"displayName":"PRABESH PANDEY","userId":"10934286709721246056"}},"outputId":"8c7ace6d-10e2-41c9-eb8a-45e5ebcfc88c"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]}]}]}